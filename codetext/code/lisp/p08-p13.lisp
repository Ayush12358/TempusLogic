(defun p8 (list)
  (if (cdr list)
      (if (eq (car list) (cadr list))
          (p8 (cdr list))
          (cons (car list) (p8 (cdr list))))
      list))

(defun p9 (list)
  (if (cdr list)
      (let ((res (p9 (cdr list))))
        (if (eq (car list) (cadr list))
            (cons (cons (car list) (car res)) (cdr res))
            (cons (list (car list)) res)))
      (when list (list list))))

(defun p10 (list)
  (mapcar (lambda (sublist) (list (p4 sublist)
                                  (car sublist)))
          (p9 list)))

(defun p11 (list)
  (mapcar (lambda (sublist)
            (if (= (car sublist) 1)
                (cadr sublist)
                sublist))
          (p10 list)))

(defun p12 (list)
  (p7
    (mapcar (lambda (sublist)
              (if (atom sublist)
                  (list sublist)
                  (p15 (cdr sublist) (car sublist))))
            (p11 list))))

(defun p13 (list)
  (if (cdr list)
      (let ((res (p13 (cdr list))))
        (cond ((and (atom (car res))
                    (eq (car list) (car res)))
               (cons (list 2 (car list)) (cdr res)))
              ((eq (car list) (cadar res))
               (cons (list (1+ (caar res)) (car list))
                     (cdr res)))))
      list))

(defun p92 (tree &aux (len (length (graph-nodes tree))))
  (when (graph-tree-p tree)
    (if (= len 1)
        (list (list (cons (car (graph-nodes tree)) 1)))
        (bind-edges (graph-edges tree) (p22 1 len) (p22 1 (1- len))))))

(defun bind-edges (edges node-list edge-list &optional acc)
  (if (null edges)
      acc
      (let ((defined (remove-if-not (lambda (n) (assoc n acc)) (nodes (car edges)))))
        (case (length defined)
          (2 (when (member (abs (- (assoc (start-node (car edges)) acc)
                                   (assoc (end-node (car edges)) acc)))
                           edge-list)
                (bind-edges (cdr edges) node-list 
                  (remove (abs (- (assoc (start-node (car edges)) acc)
                                  (assoc (end-node (car edges)) acc)))
                          edge-list)
                  acc)))
          (1 (mapcan (lambda (edge-num &aux (n1 (assoc (car defined) acc)))
                       (mapcar (lambda (n2)
                                 (bind-edges (cdr edges) 
                                             (remove n2 node-list) 
                                             (remove edge-num edge-list) 
                                             (cons (cons (other-node (car edges) (car defined)) n2) acc)))
                               (intersection (list (+ n1 edge-num) (- n1 edge-num)) node-list)))
                     edge-list))
          (T (mapcan (lambda (edge-num)
                       (mapcar (lambda (ns &aux (n1 (car ns)) (n2 (cdr ns)))
                                 (bind-edges (cdr edges) 
                                             (set-difference node-list (list n1 n2)) 
                                             (remove edge-num edge-list) 
                                             (cons (cons (start-node (car edges)) n1)
                                               (cons (cons (end-node (car edges)) n2) acc))))
                               (node-ns edge-num node-list)))
                     edge-list))))))

(defun node-ns (edge-num node-list)
  (mapcan (lambda (n1)
            (mapcar (lambda (n2) (cons n1 n2))
              (intersection (list (+ n1 edge-num) (- n1 edge-num)) node-list)))
          node-list))